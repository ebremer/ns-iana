"@context":
  - "./rml_context.jsonld"
  - reg: https://www.w3.org/ns/assignments/reg#
    dct: http://purl.org/dc/terms/
    rdfs: http://www.w3.org/2000/01/rdf-schema#
    owl: http://www.w3.org/2002/07/owl#
    schema: http://schema.org/
    "@vocab": "UNDEFINED:"  # any typo will generate an IRI with this prefix

"@included":

  - type: TriplesMap
    id: "record"
    # Generate each media-type's outgoing triples, in the media-type's file

    logicalSource:
      id: "#record-logicalSource"
      source:
        id: "#media-types.xml"
        type: RelativePathSource
        rootType: CurrentWorkingDirectory
        path: media-types.xml
      referenceFormulation: XPath
      iterator: "/registry/registry/record"

    subjectMap:
      reference: concat("https://www.w3.org/ns/iana/media-types/", file)
      # ⚠  do not use 'template' here, because some characters like '/' or '+' would be escaped
      class: rdfs:Class
      graphMap:
        id: "#record-graphMap"
        reference: concat("https://www.w3.org/ns/iana/media-types/", file, ".ttl")
        # ⚠  do not use 'template' here, because some characters like '/' or '+' would be escaped

    objectMapsPerPredicate:
      owl:sameAs:
        objectMap:
          reference: concat("https://www.w3.org/ns/iana/media-types/", file, "#Resource")
          # ⚠  do not use 'template' here, because some characters like '/' or '+' would be escaped
          termType: IRI
      dct:identifier:
        objectMap:
          reference: file
      rdfs:definedBy:
        objectMap:
          reference: concat("https://www.iana.org/assignments/media-types/", file)
          termType: IRI
          # ⚠  do not use 'template' here, because the '/' in 'file' would be escaped
      dct:created:
        objectMap:
          reference: "@date"
          datatype: date
      dct:modified:
        objectMap:
          reference: "@updated"
          datatype: date
      rdfs:seeAlso:
        - object:Map:
            termType: IRI
            reference: xref[@type="uri"]/@data
        - objectMap:
            template: https://datatracker.ietf.org/doc/{xref[@type="rfc" or @type="draft"]/@data}/
        - objectMap:
            termType: IRI
            reference: |
              for $person in xref[@type="person"]/@data return
              concat("https://www.w3.org/ns/iana/person/", $person, "#")
            # ⚠  do not use 'template' here, because non-ASCII characters in person IDs would be escaped


  - type: TriplesMap
    id: "#legacy-record"
    # Generate each media-type's outgoing legacy triples, in the media-type's file

    logicalSource: "#record-logicalSource"

    subjectMap:
      reference: concat("https://www.w3.org/ns/iana/media-types/", file, '#Resource')
      # ⚠  do not use 'template' here, because some characters like '/' or '+' would be escaped
      graphMap: "#record-graphMap"

    objectMapsPerPredicate:
      reg:name:
        - objectMap:
            reference: name[not(./xref)]
        - objectMap:
            # ad-hoc rule to handle the few xrefs contained in names
            # (the else returns nothing, by design -- I don't know how to do that more cleanly)
            reference: |
              if (name/xref)
              then replace(string(name), "by ", concat("by  ", name/xref/@data, " "))
              else name/xref

      dct:date:
        objectMap:
          reference: "@date"
          datatype: date

      reg:updated:
        # LEGACY: for some reason, reg:update only has datatype xsd:date when @date is also present
        - objectMap:
            reference: ".[not(@date)]/@updated"
        - objectMap:
            reference: ".[@date]/@updated"
            datatype: date

      reg:file:
        objectMap:
          parentTriplesMap:
            type: TriplesMap
            # Generate the blank node object of reg:file with its properties

            logicalSource: "#record-logicalSource"
            # NB: this map only works as expected because there is exactly one file per record.
            # Otherwise we would need a logicalSource iterating on 'record/file',
            # with the appropriate joinCondition.

            subjectMap:
              termType: BlankNode
              reference: .
              graphMap: "#record-graphMap"

            objectMapsPerPredicate:
              reg:type:
                objectMap:
                  reference: file/@type
              reg:file:
                objectMap:
                  reference: file
              reg:name:
                objectMap:
                  reference: file/@name

      reg:xref:
        - objectMap:
            termType: IRI
            reference: xref[@type="uri"]/@data

        - objectMap:
            template: https://tools.ietf.org/html/{xref[@type="rfc" or @type="draft"]/@data}

        - objectMap:
            termType: IRI
            reference: |
              for $person in xref[@type="person"]/@data return
              concat("https://www.w3.org/ns/iana/person/", $person, "#")
            # ⚠  do not use 'template' here, because non-ASCII characters in person IDs would be escaped

        - objectMap:
            # LEGACY: see note about #legacy-record-other-xrefs
            parentTriplesMap: "#legacy-record-other-xrefs"
            joinCondition:
              child: .
              parent: ..



  - type: TriplesMap
    id: "#legacy-record-incoming"
    # Generate legacy triple from top-level to media-type, in the media-type's file

    logicalSource: "#record-logicalSource"

    subjectMap:
      template: "https://www.w3.org/ns/iana/media-types/media-types.ttl#{../@id}"
      # LEGACY: is it deliberate that we keep the '.ttl' extension in this IRI?
      graphMap: "#record-graphMap"

    objectMapsPerPredicate:
      reg:record:
        objectMap:
          reference: concat("https://www.w3.org/ns/iana/media-types/", file, "#Resource")
          # ⚠  do not use 'template' here, because some characters like '/' or '+' would be escaped
          termType: IRI


  - type: TriplesMap
    id: "#legacy-record-other-xrefs"
    # Generate blank node object of reg:xref when the type is not in ("rfc", "draft", "uri", "person")
    # LEGACY: I suspect these blank notes are a side rabel.js, rather than a concious design choice (?).
    # I suggest that "rfc-errata" should be handled like "rfc",
    # and that "note" could be ignored (or include the text of the note rather than just the number),
    # and that this rule could then be ignored.

    logicalSource:
      source: "#media-types.xml"
      referenceFormulation: XPath
      iterator: /registry/registry/record/xref[not(@type="rfc" or @type="draft" or @type="uri" or @type="person")]

    subjectMap:
      termType: BlankNode
      template: gen:{../file}-{@type}
      graphMap:
        reference: concat("https://www.w3.org/ns/iana/media-types/", ../file, ".ttl")
        # ⚠  do not use 'template' here, because the '/' in 'file' would be escaped

    objectMapsPerPredicate:
      reg:type:
        objectMap:
          reference: "@type"
      reg:data:
        objectMap:
          reference: "@data"


  - type: TriplesMap
    id: "#legacy-person"
    # Generate each person's outgoing legacy triples, in the person's file

    logicalSource:
      id: "#legacy-person-logicalSource"
      source: "#media-types.xml"
      referenceFormulation: XPath
      iterator: "/registry/people/person"

    subjectMap:
      id: "#legacy-person-subjectMap"
      reference: concat("https://www.w3.org/ns/iana/person/", @id, "#")
      # ⚠  do not use 'template' here, because non-ASCII characters in person IDs would be escaped
      graphMap:
        reference: concat("https://www.w3.org/ns/iana/person/", @id, ".ttl")
        # ⚠  do not use 'template' here, because non-ASCII characters in person IDs would be escaped

    objectMapsPerPredicate:
      reg:id:
        - objectMap:
            reference: "@id"
      reg:name:
        - objectMap:
            reference: name
      reg:org:
        - objectMap:
            reference: org
      reg:uri:
        - objectMap:
            reference: uri/text()
            # FUTURE: exposing this information with another vocabulary, we should convert it to an IRI instead
      reg:updated:
        - objectMap:
            reference: updated
            # LEGACY: should we keep this if we make those instances of foaf:Agent


  - type: TriplesMap
    id: "#legacy-person-incoming"
    # Generate the legacy triple from media-types.ttl#n0 to each person, in the person's file

    logicalSource: "#legacy-person-logicalSource"

    subjectMap:
      template: "https://www.w3.org/ns/iana/media-types/media-types.ttl#n0"
      # LEGACY: the 'n0' suffix seems to be a mistake; do we want to keep that?
      graphMap:
        reference: concat("https://www.w3.org/ns/iana/person/", @id, ".ttl")
        # ⚠  do not use 'template' here, because non-ASCII characters in person IDs would be escaped

    objectMapsPerPredicate:
      reg:person:
        - objectMap:
            reference: concat("https://www.w3.org/ns/iana/person/", @id, "#")
            # ⚠  do not use 'template' here, because non-ASCII characters in person IDs would be escaped
            termType: IRI


  - type: TriplesMap
    id: "#legacy-person-incoming-xref"
    # Generate the 'reg:xref' triples from media-types to persons, in the person's file

    logicalSource:
      source: "#media-types.xml"
      referenceFormulation: XPath
      iterator: /registry/registry/record/xref[@type="person"]

    subjectMap:
      reference: concat("https://www.w3.org/ns/iana/media-types/", ../file, "#Resource")
      # ⚠  do not use 'template' here, because characters like '/' or '+' in 'file' would be escaped
      graphMap:
        reference: concat("https://www.w3.org/ns/iana/person/", @data, ".ttl")
        # ⚠  do not use 'template' here, because non-ASCII characters in person IDs would be escaped

    objectMapsPerPredicate:
      reg:xref:
        - objectMap:
            reference: concat("https://www.w3.org/ns/iana/person/", @data, "#")
            # ⚠  do not use 'template' here, because non-ASCII characters in person IDs would be escaped
            termType: IRI
